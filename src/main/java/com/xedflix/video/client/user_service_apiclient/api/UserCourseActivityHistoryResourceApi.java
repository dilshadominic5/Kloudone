/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.xedflix.video.client.user_service_apiclient.api;

import com.xedflix.video.client.user_service_apiclient.model.UserCourseActivityHistory;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-09-07T19:33:07.937+05:30[Asia/Kolkata]")

@Api(value = "UserCourseActivityHistoryResource", description = "the UserCourseActivityHistoryResource API")
public interface UserCourseActivityHistoryResourceApi {

    @ApiOperation(value = "createUserCourseActivityHistory", nickname = "createUserCourseActivityHistoryUsingPOST", notes = "", response = UserCourseActivityHistory.class, tags={ "user-course-activity-history-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserCourseActivityHistory.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-course-activity-histories",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<UserCourseActivityHistory> createUserCourseActivityHistoryUsingPOST(@ApiParam(value = "userCourseActivityHistory" ,required=true )  @Valid @RequestBody UserCourseActivityHistory userCourseActivityHistory);


    @ApiOperation(value = "deleteUserCourseActivityHistory", nickname = "deleteUserCourseActivityHistoryUsingDELETE", notes = "", tags={ "user-course-activity-history-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/user-course-activity-histories/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserCourseActivityHistoryUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getAllUserCourseActivityHistories", nickname = "getAllUserCourseActivityHistoriesUsingGET", notes = "", response = UserCourseActivityHistory.class, responseContainer = "List", tags={ "user-course-activity-history-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserCourseActivityHistory.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-course-activity-histories",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<List<UserCourseActivityHistory>> getAllUserCourseActivityHistoriesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Long offset,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,@ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "") @Valid @RequestParam(value = "paged", required = false) Boolean paged,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort,@ApiParam(value = "") @Valid @RequestParam(value = "sort.sorted", required = false) Boolean sortSorted,@ApiParam(value = "") @Valid @RequestParam(value = "sort.unsorted", required = false) Boolean sortUnsorted,@ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged);


    @ApiOperation(value = "getUserCourseActivityHistory", nickname = "getUserCourseActivityHistoryUsingGET", notes = "", response = UserCourseActivityHistory.class, tags={ "user-course-activity-history-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserCourseActivityHistory.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-course-activity-histories/{id}",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<UserCourseActivityHistory> getUserCourseActivityHistoryUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "updateUserCourseActivityHistory", nickname = "updateUserCourseActivityHistoryUsingPUT", notes = "", response = UserCourseActivityHistory.class, tags={ "user-course-activity-history-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserCourseActivityHistory.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-course-activity-histories",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<UserCourseActivityHistory> updateUserCourseActivityHistoryUsingPUT(@ApiParam(value = "userCourseActivityHistory" ,required=true )  @Valid @RequestBody UserCourseActivityHistory userCourseActivityHistory);

}
