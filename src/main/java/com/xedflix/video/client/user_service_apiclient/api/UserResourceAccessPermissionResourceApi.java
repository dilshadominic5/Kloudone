/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.xedflix.video.client.user_service_apiclient.api;

import com.xedflix.video.client.user_service_apiclient.model.UserResourceAccessPermission;
import com.xedflix.video.client.user_service_apiclient.model.UserResourceAccessPermissionDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.time.OffsetDateTime;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T18:42:14.703+05:30[Asia/Kolkata]")

@Api(value = "UserResourceAccessPermissionResource", description = "the UserResourceAccessPermissionResource API")
public interface UserResourceAccessPermissionResourceApi {

    @ApiOperation(value = "createMultipleUserResourceAccessPermission", nickname = "createMultipleUserResourceAccessPermissionUsingPOST", notes = "", response = UserResourceAccessPermission.class, responseContainer = "List", tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResourceAccessPermission.class, responseContainer = "List"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions/multiple",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<List<UserResourceAccessPermission>> createMultipleUserResourceAccessPermissionUsingPOST(@ApiParam(value = "userResourceAccessPermissionList", required = true) @Valid @RequestBody List<UserResourceAccessPermission> userResourceAccessPermission);


    @ApiOperation(value = "createUserResourceAccessPermission", nickname = "createUserResourceAccessPermissionUsingPOST", notes = "", response = UserResourceAccessPermission.class, tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserResourceAccessPermission.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<UserResourceAccessPermission> createUserResourceAccessPermissionUsingPOST(@ApiParam(value = "userResourceAccessPermission", required = true) @Valid @RequestBody UserResourceAccessPermission userResourceAccessPermission);


    @ApiOperation(value = "deleteUserResourceAccessPermission", nickname = "deleteUserResourceAccessPermissionUsingDELETE", notes = "", tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/user-resource-access-permissions/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserResourceAccessPermissionUsingDELETE(@ApiParam(value = "id", required = true) @PathVariable("id") Long id);


    @ApiOperation(value = "findByResourceIdsForUser", nickname = "findByResourceIdsForUserUsingGET", notes = "", response = UserResourceAccessPermission.class, responseContainer = "List", tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserResourceAccessPermission.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions/find-by-resource-ids-for-user",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<List<UserResourceAccessPermission>> findByResourceIdsForUserUsingGET(@NotNull @ApiParam(value = "resourceIds", required = true) @Valid @RequestParam(value = "resourceIds", required = true) List<Long> resourceIds, @NotNull @ApiParam(value = "resourceType", required = true) @Valid @RequestParam(value = "resourceType", required = true) String resourceType);


    @ApiOperation(value = "findResources", nickname = "findResourcesUsingGET", notes = "", response = UserResourceAccessPermission.class, responseContainer = "List", tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserResourceAccessPermission.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions/find-resources",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<List<UserResourceAccessPermission>> findResourcesUsingGET(@NotNull @ApiParam(value = "resourceType", required = true) @Valid @RequestParam(value = "resourceType", required = true) String resourceType, @ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Long offset, @ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page, @ApiParam(value = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber, @ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize, @ApiParam(value = "") @Valid @RequestParam(value = "paged", required = false) Boolean paged, @ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size, @ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort, @ApiParam(value = "") @Valid @RequestParam(value = "sort.sorted", required = false) Boolean sortSorted, @ApiParam(value = "") @Valid @RequestParam(value = "sort.unsorted", required = false) Boolean sortUnsorted, @ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged);


    @ApiOperation(value = "findUsersAssignedForResource", nickname = "findUsersAssignedForResourceUsingGET", notes = "", response = UserResourceAccessPermissionDTO.class, responseContainer = "List", tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserResourceAccessPermissionDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions/find-users-assigned-for-resource",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<List<UserResourceAccessPermissionDTO>> findUsersAssignedForResourceUsingGET(@NotNull @ApiParam(value = "resourceId", required = true) @Valid @RequestParam(value = "resourceId", required = true) Long resourceId, @NotNull @ApiParam(value = "resourceType", required = true) @Valid @RequestParam(value = "resourceType", required = true) String resourceType);


    @ApiOperation(value = "getAllUserResourceAccessPermissions", nickname = "getAllUserResourceAccessPermissionsUsingGET", notes = "", response = UserResourceAccessPermission.class, responseContainer = "List", tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserResourceAccessPermission.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<List<UserResourceAccessPermission>> getAllUserResourceAccessPermissionsUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "createdAt.equals", required = false) OffsetDateTime createdAtEquals, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.greaterOrEqualThan", required = false) OffsetDateTime createdAtGreaterOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.greaterThan", required = false) OffsetDateTime createdAtGreaterThan, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].dayOfMonth", required = false) Integer createdAtIn0DayOfMonth, @ApiParam(value = "", allowableValues = "MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY") @Valid @RequestParam(value = "createdAt.in[0].dayOfWeek", required = false) String createdAtIn0DayOfWeek, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].dayOfYear", required = false) Integer createdAtIn0DayOfYear, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].hour", required = false) Integer createdAtIn0Hour, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].minute", required = false) Integer createdAtIn0Minute, @ApiParam(value = "", allowableValues = "JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER") @Valid @RequestParam(value = "createdAt.in[0].month", required = false) String createdAtIn0Month, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].monthValue", required = false) Integer createdAtIn0MonthValue, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].nano", required = false) Integer createdAtIn0Nano, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.id", required = false) String createdAtIn0OffsetId, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.fixedOffset", required = false) Boolean createdAtIn0OffsetRulesFixedOffset, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator", required = false) Integer createdAtIn0OffsetRulesTransitionRules0DayOfMonthIndicator, @ApiParam(value = "", allowableValues = "MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].dayOfWeek", required = false) String createdAtIn0OffsetRulesTransitionRules0DayOfWeek, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].localTime.hour", required = false) Integer createdAtIn0OffsetRulesTransitionRules0LocalTimeHour, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].localTime.minute", required = false) Integer createdAtIn0OffsetRulesTransitionRules0LocalTimeMinute, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].localTime.nano", required = false) Integer createdAtIn0OffsetRulesTransitionRules0LocalTimeNano, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].localTime.second", required = false) Integer createdAtIn0OffsetRulesTransitionRules0LocalTimeSecond, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].midnightEndOfDay", required = false) Boolean createdAtIn0OffsetRulesTransitionRules0MidnightEndOfDay, @ApiParam(value = "", allowableValues = "JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].month", required = false) String createdAtIn0OffsetRulesTransitionRules0Month, @ApiParam(value = "", allowableValues = "UTC, WALL, STANDARD") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitionRules[0].timeDefinition", required = false) String createdAtIn0OffsetRulesTransitionRules0TimeDefinition, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].dateTimeAfter", required = false) OffsetDateTime createdAtIn0OffsetRulesTransitions0DateTimeAfter, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].dateTimeBefore", required = false) OffsetDateTime createdAtIn0OffsetRulesTransitions0DateTimeBefore, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].duration.nano", required = false) Integer createdAtIn0OffsetRulesTransitions0DurationNano, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].duration.negative", required = false) Boolean createdAtIn0OffsetRulesTransitions0DurationNegative, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].duration.seconds", required = false) Long createdAtIn0OffsetRulesTransitions0DurationSeconds, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].duration.units[0].dateBased", required = false) Boolean createdAtIn0OffsetRulesTransitions0DurationUnits0DateBased, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated", required = false) Boolean createdAtIn0OffsetRulesTransitions0DurationUnits0DurationEstimated, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].duration.units[0].timeBased", required = false) Boolean createdAtIn0OffsetRulesTransitions0DurationUnits0TimeBased, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].duration.zero", required = false) Boolean createdAtIn0OffsetRulesTransitions0DurationZero, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].gap", required = false) Boolean createdAtIn0OffsetRulesTransitions0Gap, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].instant", required = false) OffsetDateTime createdAtIn0OffsetRulesTransitions0Instant, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.rules.transitions[0].overlap", required = false) Boolean createdAtIn0OffsetRulesTransitions0Overlap, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].offset.totalSeconds", required = false) Integer createdAtIn0OffsetTotalSeconds, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].second", required = false) Integer createdAtIn0Second, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].year", required = false) Integer createdAtIn0Year, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.id", required = false) String createdAtIn0ZoneId, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.fixedOffset", required = false) Boolean createdAtIn0ZoneRulesFixedOffset, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator", required = false) Integer createdAtIn0ZoneRulesTransitionRules0DayOfMonthIndicator, @ApiParam(value = "", allowableValues = "MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].dayOfWeek", required = false) String createdAtIn0ZoneRulesTransitionRules0DayOfWeek, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].localTime.hour", required = false) Integer createdAtIn0ZoneRulesTransitionRules0LocalTimeHour, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].localTime.minute", required = false) Integer createdAtIn0ZoneRulesTransitionRules0LocalTimeMinute, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].localTime.nano", required = false) Integer createdAtIn0ZoneRulesTransitionRules0LocalTimeNano, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].localTime.second", required = false) Integer createdAtIn0ZoneRulesTransitionRules0LocalTimeSecond, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].midnightEndOfDay", required = false) Boolean createdAtIn0ZoneRulesTransitionRules0MidnightEndOfDay, @ApiParam(value = "", allowableValues = "JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].month", required = false) String createdAtIn0ZoneRulesTransitionRules0Month, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].offsetAfter.id", required = false) String createdAtIn0ZoneRulesTransitionRules0OffsetAfterId, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds", required = false) Integer createdAtIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].offsetBefore.id", required = false) String createdAtIn0ZoneRulesTransitionRules0OffsetBeforeId, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds", required = false) Integer createdAtIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].standardOffset.id", required = false) String createdAtIn0ZoneRulesTransitionRules0StandardOffsetId, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds", required = false) Integer createdAtIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds, @ApiParam(value = "", allowableValues = "UTC, WALL, STANDARD") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitionRules[0].timeDefinition", required = false) String createdAtIn0ZoneRulesTransitionRules0TimeDefinition, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].dateTimeAfter", required = false) OffsetDateTime createdAtIn0ZoneRulesTransitions0DateTimeAfter, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].dateTimeBefore", required = false) OffsetDateTime createdAtIn0ZoneRulesTransitions0DateTimeBefore, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].duration.nano", required = false) Integer createdAtIn0ZoneRulesTransitions0DurationNano, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].duration.negative", required = false) Boolean createdAtIn0ZoneRulesTransitions0DurationNegative, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].duration.seconds", required = false) Long createdAtIn0ZoneRulesTransitions0DurationSeconds, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].duration.units[0].dateBased", required = false) Boolean createdAtIn0ZoneRulesTransitions0DurationUnits0DateBased, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated", required = false) Boolean createdAtIn0ZoneRulesTransitions0DurationUnits0DurationEstimated, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].duration.units[0].timeBased", required = false) Boolean createdAtIn0ZoneRulesTransitions0DurationUnits0TimeBased, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].duration.zero", required = false) Boolean createdAtIn0ZoneRulesTransitions0DurationZero, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].gap", required = false) Boolean createdAtIn0ZoneRulesTransitions0Gap, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].instant", required = false) OffsetDateTime createdAtIn0ZoneRulesTransitions0Instant, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].offsetAfter.id", required = false) String createdAtIn0ZoneRulesTransitions0OffsetAfterId, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds", required = false) Integer createdAtIn0ZoneRulesTransitions0OffsetAfterTotalSeconds, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].offsetBefore.id", required = false) String createdAtIn0ZoneRulesTransitions0OffsetBeforeId, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds", required = false) Integer createdAtIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.in[0].zone.rules.transitions[0].overlap", required = false) Boolean createdAtIn0ZoneRulesTransitions0Overlap, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.lessOrEqualThan", required = false) OffsetDateTime createdAtLessOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.lessThan", required = false) OffsetDateTime createdAtLessThan, @ApiParam(value = "") @Valid @RequestParam(value = "createdAt.specified", required = false) Boolean createdAtSpecified, @ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals, @ApiParam(value = "") @Valid @RequestParam(value = "id.greaterOrEqualThan", required = false) Long idGreaterOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan, @ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn, @ApiParam(value = "") @Valid @RequestParam(value = "id.lessOrEqualThan", required = false) Long idLessOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan, @ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified, @ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Long offset, @ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page, @ApiParam(value = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber, @ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize, @ApiParam(value = "") @Valid @RequestParam(value = "paged", required = false) Boolean paged, @ApiParam(value = "") @Valid @RequestParam(value = "permissionLastGivenBy.equals", required = false) Long permissionLastGivenByEquals, @ApiParam(value = "") @Valid @RequestParam(value = "permissionLastGivenBy.greaterOrEqualThan", required = false) Long permissionLastGivenByGreaterOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "permissionLastGivenBy.greaterThan", required = false) Long permissionLastGivenByGreaterThan, @ApiParam(value = "") @Valid @RequestParam(value = "permissionLastGivenBy.in", required = false) List<Long> permissionLastGivenByIn, @ApiParam(value = "") @Valid @RequestParam(value = "permissionLastGivenBy.lessOrEqualThan", required = false) Long permissionLastGivenByLessOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "permissionLastGivenBy.lessThan", required = false) Long permissionLastGivenByLessThan, @ApiParam(value = "") @Valid @RequestParam(value = "permissionLastGivenBy.specified", required = false) Boolean permissionLastGivenBySpecified, @ApiParam(value = "") @Valid @RequestParam(value = "resourceId.equals", required = false) Long resourceIdEquals, @ApiParam(value = "") @Valid @RequestParam(value = "resourceId.greaterOrEqualThan", required = false) Long resourceIdGreaterOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "resourceId.greaterThan", required = false) Long resourceIdGreaterThan, @ApiParam(value = "") @Valid @RequestParam(value = "resourceId.in", required = false) List<Long> resourceIdIn, @ApiParam(value = "") @Valid @RequestParam(value = "resourceId.lessOrEqualThan", required = false) Long resourceIdLessOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "resourceId.lessThan", required = false) Long resourceIdLessThan, @ApiParam(value = "") @Valid @RequestParam(value = "resourceId.specified", required = false) Boolean resourceIdSpecified, @ApiParam(value = "", allowableValues = "Video, Course, CourseResource, CourseModule") @Valid @RequestParam(value = "resourceType.equals", required = false) String resourceTypeEquals, @ApiParam(value = "", allowableValues = "Video, Course, CourseResource, CourseModule") @Valid @RequestParam(value = "resourceType.in", required = false) List<String> resourceTypeIn, @ApiParam(value = "") @Valid @RequestParam(value = "resourceType.specified", required = false) Boolean resourceTypeSpecified, @ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size, @ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort, @ApiParam(value = "") @Valid @RequestParam(value = "sort.sorted", required = false) Boolean sortSorted, @ApiParam(value = "") @Valid @RequestParam(value = "sort.unsorted", required = false) Boolean sortUnsorted, @ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged, @ApiParam(value = "") @Valid @RequestParam(value = "userId.equals", required = false) Long userIdEquals, @ApiParam(value = "") @Valid @RequestParam(value = "userId.greaterOrEqualThan", required = false) Long userIdGreaterOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "userId.greaterThan", required = false) Long userIdGreaterThan, @ApiParam(value = "") @Valid @RequestParam(value = "userId.in", required = false) List<Long> userIdIn, @ApiParam(value = "") @Valid @RequestParam(value = "userId.lessOrEqualThan", required = false) Long userIdLessOrEqualThan, @ApiParam(value = "") @Valid @RequestParam(value = "userId.lessThan", required = false) Long userIdLessThan, @ApiParam(value = "") @Valid @RequestParam(value = "userId.specified", required = false) Boolean userIdSpecified);


    @ApiOperation(value = "getUserResourceAccessPermission", nickname = "getUserResourceAccessPermissionUsingGET", notes = "", response = UserResourceAccessPermission.class, tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserResourceAccessPermission.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions/{id}",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<UserResourceAccessPermission> getUserResourceAccessPermissionUsingGET(@ApiParam(value = "id", required = true) @PathVariable("id") Long id);


    @ApiOperation(value = "hasAccess", nickname = "hasAccessUsingGET", notes = "", response = String.class, tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions/has-access",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<String> hasAccessUsingGET(@NotNull @ApiParam(value = "resourceId", required = true) @Valid @RequestParam(value = "resourceId", required = true) Long resourceId, @NotNull @ApiParam(value = "resourceType", required = true) @Valid @RequestParam(value = "resourceType", required = true) String resourceType);


    @ApiOperation(value = "updateUserResourceAccessPermission", nickname = "updateUserResourceAccessPermissionUsingPUT", notes = "", response = UserResourceAccessPermission.class, tags={ "user-resource-access-permission-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserResourceAccessPermission.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-resource-access-permissions",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<UserResourceAccessPermission> updateUserResourceAccessPermissionUsingPUT(@ApiParam(value = "userResourceAccessPermission", required = true) @Valid @RequestBody UserResourceAccessPermission userResourceAccessPermission);

}
