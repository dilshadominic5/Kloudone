/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.xedflix.video.client.userserviceapiclient.api;

import com.xedflix.video.client.userserviceapiclient.model.ExtendedUser;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-09-07T19:33:07.937+05:30[Asia/Kolkata]")

@Api(value = "ExtendedUserResource", description = "the ExtendedUserResource API")
public interface ExtendedUserResourceApi {

    @ApiOperation(value = "createExtendedUser", nickname = "createExtendedUserUsingPOST", notes = "", response = ExtendedUser.class, tags={ "extended-user-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = ExtendedUser.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/extended-users",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<ExtendedUser> createExtendedUserUsingPOST(@ApiParam(value = "extendedUser" ,required=true )  @Valid @RequestBody ExtendedUser extendedUser);


    @ApiOperation(value = "deleteExtendedUser", nickname = "deleteExtendedUserUsingDELETE", notes = "", tags={ "extended-user-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/extended-users/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteExtendedUserUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getAllExtendedUsers", nickname = "getAllExtendedUsersUsingGET", notes = "", response = ExtendedUser.class, responseContainer = "List", tags={ "extended-user-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = ExtendedUser.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/extended-users",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<List<ExtendedUser>> getAllExtendedUsersUsingGET();


    @ApiOperation(value = "getExtendedUser", nickname = "getExtendedUserUsingGET", notes = "", response = ExtendedUser.class, tags={ "extended-user-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = ExtendedUser.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/extended-users/{id}",
        produces = "*/*",
        method = RequestMethod.GET)
    ResponseEntity<ExtendedUser> getExtendedUserUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "updateExtendedUser", nickname = "updateExtendedUserUsingPUT", notes = "", response = ExtendedUser.class, tags={ "extended-user-resource", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = ExtendedUser.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/extended-users",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<ExtendedUser> updateExtendedUserUsingPUT(@ApiParam(value = "extendedUser" ,required=true )  @Valid @RequestBody ExtendedUser extendedUser);

}
